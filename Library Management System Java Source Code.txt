


        import java.sql.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane; 
import javax.swing.table.DefaultTableModel;






     public StudentJFrame() {
        initComponents();
        Connect();
        StudentData();
    }

    Connection con;
    PreparedStatement pst;
    
    public void Connect(){
    
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/librarydb","root","");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StudentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(StudentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    
    }






     Method Code


       private void StudentData(){
    
        try {
            int QQ;
            
            pst = con.prepareStatement("SELECT * FROM student");
            ResultSet Rs = pst.executeQuery();
            
            ResultSetMetaData RSMD = Rs.getMetaData();

            QQ = RSMD.getColumnCount();
            
            DefaultTableModel DFG =(DefaultTableModel)table1.getModel(); 
            
            DFG.setRowCount(0);
             
            while(Rs.next()){
        
            Vector v2 = new Vector();
             
            for(int aa=1; aa<=QQ; aa++){
                 
                v2.add(Rs.getString("studentid"));
                v2.add(Rs.getString("studentname"));
                v2.add(Rs.getString("email"));
                v2.add(Rs.getString("address"));
                
             }
             
             DFG.addRow(v2);
        
        }


       } catch (SQLException ex) {
            Logger.getLogger(StudentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }





        Insert Code


         try {
            String studentid = txtId.getText();
            String studentname = txtName.getText();
            String email = txtEmail.getText();
            String address = txtAddress.getText();
            
            pst = con.prepareStatement("INSERT INTO student (studentid,studentname,email,address)VALUES(?,?,?,?)");
            pst.setString(1,studentid);
            pst.setString(2,studentname);
            pst.setString(3,email);
            pst.setString(4,address);
            
            int a = pst.executeUpdate();
            
            if (a==1){
            
            JOptionPane.showMessageDialog(this,"Record Inserted Successfully");
            StudentData();
                
            
            }else{
                
            JOptionPane.showMessageDialog(this,"Error, Please Try Again");

                
            }

           } catch (SQLException ex) {
            Logger.getLogger(StudentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }           







         Update Code


          try {
            String studentid = txtId.getText();
            String studentname = txtName.getText();
            String email = txtEmail.getText();
            String address = txtAddress.getText();
            
            pst = con.prepareStatement("update student set studentname= ?,email= ?,address= ? where studentid= ?");
            
            pst.setString(1,studentname);
            pst.setString(2,email);
            pst.setString(3,address);
            pst.setString(4,studentid);
            int k = pst.executeUpdate();
            
            if(k==1){

             JOptionPane.showMessageDialog(this, "Record Updated Successfully");
             StudentData();

            }else{

             JOptionPane.showMessageDialog(this, "Update Failed");

            }
            
        } catch (SQLException ex) {
            Logger.getLogger(StudentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }                                





       Delete Code


       try {
            String studentid = txtId.getText();
            
            pst=con.prepareStatement("DELETE FROM student WHERE studentid=?");
            
            pst.setString(1,studentid);
            
            int k = pst.executeUpdate();
            if(k==1){

             JOptionPane.showMessageDialog(this, "Record Deleted Successfully");
             StudentData();

            }else{

            JOptionPane.showMessageDialog(this, "Error, Please try again");

           }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(StudentJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
         
    }                                        





        tableMouseClicked Code


         DefaultTableModel model =(DefaultTableModel)table1.getModel(); 
        int selectedIndex = table1.getSelectedRow();
        txtId.setText(model.getValueAt(selectedIndex, 0).toString());
        txtName.setText(model.getValueAt(selectedIndex, 1).toString());
        txtEmail.setText(model.getValueAt(selectedIndex, 2).toString());
        txtAddress.setText(model.getValueAt(selectedIndex, 3).toString());



       


        Dashboard Code


        import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;



         Method Code


         private void Display() {
        Connection con = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            // Establish connection
            con = DriverManager.getConnection("jdbc:mysql://localhost/librarydb","root","");
            statement = con.createStatement();

            // Execute query
            String query = "SELECT COUNT(*) AS total FROM student";
            resultSet = statement.executeQuery(query);

            // Process result
            if (resultSet.next()) {
                int count = resultSet.getInt("total");
                lblCount.setText("Students: " + count);
            }
        } catch (Exception e) {
            e.printStackTrace();
            lblCount.setText("Error fetching count");
        } finally {
            // Close resources
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (con != null) con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    
    
    private void Display1() {
        Connection con = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            // Establish connection
            con = DriverManager.getConnection("jdbc:mysql://localhost/librarydb","root","");
            statement = con.createStatement();

            // Execute query
            String query = "SELECT COUNT(*) AS total FROM book";
            resultSet = statement.executeQuery(query);

            // Process result
            if (resultSet.next()) {
                int count = resultSet.getInt("total");
                lblCount1.setText("Books: " + count);
            }
        } catch (Exception e) {
            e.printStackTrace();
            lblCount1.setText("Error fetching count");
        } finally {
            // Close resources
            try {
                if (resultSet != null) resultSet.close();
                if (statement != null) statement.close();
                if (con != null) con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }



          